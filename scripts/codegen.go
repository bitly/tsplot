package main
/*
codegen.go creates Set_* API methods for Google Cloud Monitoring aggregation alignment and reduction options.
Leverages the exported variables in the Google monitoring/v3 package (common.pb.go) to ensure that all
alignment and reduction options are covered.
*/

import (
	"flag"
	"log"
	"os"
	"text/template"

	monitoringpb "google.golang.org/genproto/googleapis/monitoring/v3"
)

var rawTpl = `/*
DO NOT EDIT
Generated by codegen.go
https://github.com/googleapis/go-genproto/blob/0135a39c27378c1b903c75204eff61a060be5eb7/googleapis/monitoring/v3/common.pb.go
*/
package tsplot
{{range $name, $value := .Aligners}}
func (mq *MetricQuery) Set_{{$name}}() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner({{$value}}))
}
{{end -}}
{{range $name, $value := .Reducers}}
func (mq *MetricQuery) Set_{{$name}}() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer({{$value}}))
}
{{end}}
`

func main() {
	outFileName := flag.String("output", "./tsplot/set_aggregation_opts.go", "Output path of generated file.")
	toStdout := flag.Bool("stdout", false, "Toggle output to STDOUT.")
	flag.Parse()

	var outFile *os.File
	var fileErr error

	if *toStdout {
		outFile = os.Stdout
	} else {
		outFile, fileErr = os.OpenFile(*outFileName, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)
		if fileErr != nil {
			log.Print(fileErr)
		}
		defer outFile.Close()
	}

	values := struct {
		Aligners map[string]int32
		Reducers map[string]int32
	}{
		Aligners: monitoringpb.Aggregation_Aligner_value,
		Reducers: monitoringpb.Aggregation_Reducer_value,
	}

	t := template.New("codegen")
	pt := template.Must(t.Parse(rawTpl))
	err := pt.Execute(outFile, values)
	if err != nil {
		log.Fatal(err)
	}
}
