package tsplot

/*
DO NOT EDIT
Generated by codegen.go
https://github.com/googleapis/go-genproto/blob/0135a39c27378c1b903c75204eff61a060be5eb7/googleapis/monitoring/v3/common.pb.go
*/

func (mq *MetricQuery) Set_ALIGN_COUNT() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(13))
}

func (mq *MetricQuery) Set_ALIGN_COUNT_FALSE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(24))
}

func (mq *MetricQuery) Set_ALIGN_COUNT_TRUE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(16))
}

func (mq *MetricQuery) Set_ALIGN_DELTA() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(1))
}

func (mq *MetricQuery) Set_ALIGN_FRACTION_TRUE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(17))
}

func (mq *MetricQuery) Set_ALIGN_INTERPOLATE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(3))
}

func (mq *MetricQuery) Set_ALIGN_MAX() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(11))
}

func (mq *MetricQuery) Set_ALIGN_MEAN() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(12))
}

func (mq *MetricQuery) Set_ALIGN_MIN() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(10))
}

func (mq *MetricQuery) Set_ALIGN_NEXT_OLDER() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(4))
}

func (mq *MetricQuery) Set_ALIGN_NONE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(0))
}

func (mq *MetricQuery) Set_ALIGN_PERCENTILE_05() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(21))
}

func (mq *MetricQuery) Set_ALIGN_PERCENTILE_50() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(20))
}

func (mq *MetricQuery) Set_ALIGN_PERCENTILE_95() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(19))
}

func (mq *MetricQuery) Set_ALIGN_PERCENTILE_99() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(18))
}

func (mq *MetricQuery) Set_ALIGN_PERCENT_CHANGE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(23))
}

func (mq *MetricQuery) Set_ALIGN_RATE() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(2))
}

func (mq *MetricQuery) Set_ALIGN_STDDEV() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(15))
}

func (mq *MetricQuery) Set_ALIGN_SUM() {
	*mq.aggregation = append(*mq.aggregation, withPerSeriesAligner(14))
}

func (mq *MetricQuery) Set_REDUCE_COUNT() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(6))
}

func (mq *MetricQuery) Set_REDUCE_COUNT_FALSE() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(15))
}

func (mq *MetricQuery) Set_REDUCE_COUNT_TRUE() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(7))
}

func (mq *MetricQuery) Set_REDUCE_FRACTION_TRUE() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(8))
}

func (mq *MetricQuery) Set_REDUCE_MAX() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(3))
}

func (mq *MetricQuery) Set_REDUCE_MEAN() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(1))
}

func (mq *MetricQuery) Set_REDUCE_MIN() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(2))
}

func (mq *MetricQuery) Set_REDUCE_NONE() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(0))
}

func (mq *MetricQuery) Set_REDUCE_PERCENTILE_05() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(12))
}

func (mq *MetricQuery) Set_REDUCE_PERCENTILE_50() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(11))
}

func (mq *MetricQuery) Set_REDUCE_PERCENTILE_95() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(10))
}

func (mq *MetricQuery) Set_REDUCE_PERCENTILE_99() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(9))
}

func (mq *MetricQuery) Set_REDUCE_STDDEV() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(5))
}

func (mq *MetricQuery) Set_REDUCE_SUM() {
	*mq.aggregation = append(*mq.aggregation, withCrossSeriesReducer(4))
}
